# -*- coding: utf-8 -*-
"""Weather_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AhNQmv9y4JuhW1y9QFHXn-eGr3z59jVt
"""

import requests
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier , RandomForestRegressor
from sklearn.metrics import mean_squared_error
from datetime import datetime , timedelta
import pytz

"""**Creating Api**"""

API_Key = 'b6b35785d23c87636104f045052f3e3d'
BASE_URL = 'https://api.openweathermap.org/data/2.5/'

"""**Fetching Weather Data**"""

def get_current_weather(city):
    url = f"{BASE_URL}weather?q={city}&appid={API_Key}&units=metric"
    response = requests.get(url)
    data = response.json()

    if response.status_code != 200:
        print(f"Error: {data.get('message', 'Failed to fetch weather data.')}")
        return None

    return {
        'city': data.get('name', city),
        'current_temp': round(data['main'].get('temp', 0)),
        'feels_like': round(data['main'].get('feels_like', 0)),
        'temp_min': round(data['main'].get('temp_min', 0)),
        'temp_max': round(data['main'].get('temp_max', 0)),
        'humidity': round(data['main'].get('humidity', 0)),
        'description': data['weather'][0].get('description', 'N/A'),
        'country': data['sys'].get('country', 'N/A'),
        'wind_gust_dir': data['wind'].get('deg', 0),
        'Pressure': data['main'].get('pressure', 0),
        'Temp': data['main'].get('temp', 0),
        'Wind_Gust_Speed': data['wind'].get('speed', 0)
    }

"""**Reading Historical data**"""

def read_historical_data(filename):
  df = pd.read_csv(filename)
  df = df.dropna()
  df = df.drop_duplicates()
  return df

"""**Prepare Data for Training**"""

def prepare_data(data):
  le = LabelEncoder()
  data['WindGustDir'] = le.fit_transform(data['WindGustDir'])
  data['RainTomorrow'] = le.fit_transform(data['RainTomorrow'])
  X = data[['MinTemp','MaxTemp','WindGustDir','WindGustSpeed','Humidity','Pressure', 'Temp']]
  y = data['RainTomorrow']
  return X,y,le

"""**Train Rain Prediction Model**"""

def train_rain_model(X,y):
  X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
  model = RandomForestClassifier(n_estimators=100,random_state=42)
  model.fit(X_train,y_train)
  y_pred = model.predict(X_test)
  print('Mean squred error in rain model')
  print(mean_squared_error(y_test,y_pred))

  return model

"""**Prepare Regression Data**"""

def prepare_regression_data(data , feature):
  X , y = [] , []
  for i in range (len(data) - 1):
    X.append(data[feature].iloc[i])
    y.append(data[feature].iloc[i+1])
    X = np.array(X).reshape(-1,1)
    y = np.array(y)
    return X , y

"""**Train Regression Model**"""

def train_regression_model(X,y):
  model = RandomForestRegressor(n_estimators=100,random_state=42)
  model.fit(X,y)
  return model

"""**Predicite Future**"""

def predict_future(model , current_value):
  predictions = [current_value]
  for i in range(5):
    next_value = model.predict(np.array([[predictions[-1]]]))
    predictions.append(next_value[0])

    return predictions[1:]

"""**Weather Analysis Function**"""

def weather_view():
    city = input('Enter the city name: ')
    current_weather = get_current_weather(city)

    # Load historical data
    historical_data = read_historical_data("/content/weather.csv")

    # Prepare and train rain prediction model
    X, y, le = prepare_data(historical_data)
    rain_model = train_rain_model(X, y)

    # Map wind direction to compass points
    wind_deg = current_weather['wind_gust_dir'] % 360
    compass_points = [
        ("N", 0, 11.25), ("NNE", 11.25, 33.75), ("NE", 33.75, 56.25),
        ("ENE", 56.25, 78.75), ("E", 78.75, 101.25), ("ESE", 101.25, 123.75),
        ("SE", 123.75, 146.25), ("SSE", 146.25, 168.75), ("S", 168.75, 191.25),
        ("SSW", 191.25, 213.75), ("SW", 213.75, 236.25), ("WSW", 236.25, 258.75),
        ("W", 258.75, 281.25), ("WNW", 281.25, 303.75), ("NW", 303.75, 326.25),
        ("NNW", 326.25, 348.75)
    ]
    compass_direction = next((p for p, s, e in compass_points if s <= wind_deg < e), "N")

    if compass_direction in le.classes_:
        compass_direction_encoded = le.transform([compass_direction])[0]
    else:
        compass_direction_encoded = -1

    current_data = {
        'MinTemp': current_weather['temp_min'],
        'MaxTemp': current_weather['temp_max'],
        'WindGustDir': compass_direction_encoded,
        'WindGustSpeed': current_weather['Wind_Gust_Speed'],
        'Humidity': current_weather['humidity'],
        'Pressure': current_weather['Pressure'],
        'Temp': current_weather['current_temp']
    }

    current_df = pd.DataFrame([current_data])
    rain_prediction = rain_model.predict(current_df)[0]

    # Temperature and humidity models
    X_temp, y_temp = prepare_regression_data(historical_data, 'Temp')
    X_humidity, y_humidity = prepare_regression_data(historical_data, 'Humidity')

    temp_model = train_regression_model(X_temp, y_temp)
    humidity_model = train_regression_model(X_humidity, y_humidity)

    future_temp = predict_future(temp_model, current_weather['temp_min'])
    future_humidity = predict_future(humidity_model, current_weather['humidity'])

    timezone = pytz.timezone('Asia/Karachi')
    now = datetime.now(timezone)
    next_hour = now + timedelta(hours=1)
    next_hour = next_hour.replace(minute=0, second=0, microsecond=0)
    future_times = [(next_hour + timedelta(hours=i)).strftime('%H:00') for i in range(5)]

    # ---------- PRINT RESULTS ----------
    print("------ Current Weather ------")
    print(f"Location: {city}, {current_weather['country']}")
    print(f"Temperature: {current_weather['current_temp']}°C (Feels like {current_weather['feels_like']}°C)")
    print(f"Min Temperature: {current_weather['temp_min']}°C")
    print(f"Max Temperature: {current_weather['temp_max']}°C")
    print(f"Humidity: {current_weather['humidity']}%")
    print(f"Pressure: {current_weather['Pressure']} hPa")
    print(f"Wind Speed: {current_weather['Wind_Gust_Speed']} m/s")
    print(f"Wind Direction: {compass_direction}")
    print(f"Weather Description: {current_weather['description']}")
    print(f"Rain Prediction: {'Yes' if rain_prediction else 'No'}")
    print("------------------------------")

    print("\nFuture Temperature Predictions:")
    for time, temp in zip(future_times, future_temp):
        print(f"{time}: {round(temp, 1)}°C")

    print("\nFuture Humidity Predictions:")
    for time, humidity in zip(future_times, future_humidity):
        print(f"{time}: {round(humidity, 1)}%")

weather_view()